# -*- coding: utf-8 -*-
"""IEEE Fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZVbM5wd75S1OsTscV1y0yye6gRcf8Y00
"""

import pandas as pd

# Load data
train_transaction = pd.read_csv('/content/sample_data/train_transaction.csv')
train_identity = pd.read_csv('/content/sample_data/train_identity.csv')
test_transaction = pd.read_csv('/content/sample_data/test_transaction.csv')
test_identity = pd.read_csv('/content/sample_data/test_identity.csv')

# Merge identity and transaction on TransactionID
train_df = pd.merge(train_transaction, train_identity, on='TransactionID', how='left')
test_df = pd.merge(test_transaction, test_identity, on='TransactionID', how='left')
features = [
    "TransactionAmt", "ProductCD", "card1", "card2", "card3", "card4", "card5",
    "addr1", "dist1", "DeviceType", "DeviceInfo"
]

df = train_df[features].copy()
df_test = test_df[features].copy()

# Handle missing values
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='most_frequent')
df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=features)
df_test_imputed = pd.DataFrame(imputer.transform(df_test), columns=features)

# Encode categorical data
from sklearn.preprocessing import OrdinalEncoder

# Step: Identify categorical columns
cat_cols = df_imputed.select_dtypes(include='object').columns.tolist()

# Step: Create and fit encoder on training data
encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)
df_imputed[cat_cols] = encoder.fit_transform(df_imputed[cat_cols].astype(str))

# Step: Transform test data using same encoder
df_test_imputed[cat_cols] = encoder.transform(df_test_imputed[cat_cols].astype(str))

from sklearn.ensemble import IsolationForest

isof = IsolationForest(contamination=0.025, random_state=42)
isof.fit(df_imputed)

import numpy as np
import pandas as pd

# Ask user to enter values
print("üîé Enter transaction details:")

user_input = {
    "TransactionAmt": [float(input("TransactionAmt: "))],
    "ProductCD": [input("ProductCD (e.g., W, H): ")],
    "card1": [int(input("card1: "))],
    "card2": [float(input("card2: "))],
    "card3": [float(input("card3: "))],
    "card4": [input("card4 (e.g., visa, mastercard): ")],
    "card5": [float(input("card5: "))],
    "addr1": [float(input("addr1: "))],
    "dist1": [float(input("dist1: "))],
    "DeviceType": [input("DeviceType (e.g., desktop, mobile): ")],
    "DeviceInfo": [input("DeviceInfo (e.g., Windows, iOS): ")]
}

# Convert to DataFrame
sample_df = pd.DataFrame(user_input)

# Apply imputation
sample_df = pd.DataFrame(imputer.transform(sample_df), columns=features)

# Encode categorical features
sample_df[cat_cols] = encoder.transform(sample_df[cat_cols].astype(str))

# Predict
prediction = isof.predict(sample_df)

# Show result
if prediction[0] == -1:
    print("‚ö†Ô∏è Fraudulent Transaction")
else:
    print("‚úÖ Legitimate Transaction")

"""MODEL SAVE IN ZIP FILE BCZ IVE TO SHARE WITH ADIL BHAI KI AULAD"""

#import joblib

# Save model
#joblib.dump(isof, "isolation_model.joblib")

# Save imputer and encoder
#joblib.dump(imputer, "imputer.joblib")
#joblib.dump(encoder, "encoder.joblib")

# Save lists
#import json
#with open("features.json", "w") as f:
 #   json.dump(features, f)

#with open("cat_cols.json", "w") as f:
 #   json.dump(cat_cols, f)

#import os

# Create folder
#os.makedirs("fraud_model", exist_ok=True)

#import joblib

# Save model
#joblib.dump(isof, "fraud_model/isolation_model.joblib")

# Save imputer and encoder
#joblib.dump(imputer, "fraud_model/imputer.joblib")
#joblib.dump(encoder, "fraud_model/encoder.joblib")

#import json

# Save features
#with open("fraud_model/features.json", "w") as f:
 #   json.dump(features, f)

# Save categorical columns
#with open("fraud_model/cat_cols.json", "w") as f:
 #   json.dump(cat_cols, f)

predict_code = """
import joblib
import pandas as pd
import json

# Load model and preprocessing tools
isof = joblib.load("isolation_model.joblib")
imputer = joblib.load("imputer.joblib")
encoder = joblib.load("encoder.joblib")
features = json.load(open("features.json"))
cat_cols = json.load(open("cat_cols.json"))

def predict_transaction(user_input: dict):
    sample_df = pd.DataFrame(user_input)

    # Impute
    sample_df = pd.DataFrame(imputer.transform(sample_df), columns=features)

    # Encode
    sample_df[cat_cols] = encoder.transform(sample_df[cat_cols].astype(str))

    # Predict
    pred = isof.predict(sample_df)
    return "Fraud" if pred[0] == -1 else "Legit"
"""

"""# Save to file
with open("fraud_model/predict.py", "w") as f:
    f.write(predict_code)

"""import shutil

# Create a zip file
shutil.make_archive("fraud_model_package", 'zip', "fraud_model")

"""from google.colab import files
files.download("fraud_model_package.zip")

